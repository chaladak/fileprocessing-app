pipeline {
    agent {
        label 'docker-agent'
    }

    environment {
        DOCKER_HUB = "docker.io"
        DOCKER_REGISTRY = "achodak"
        DOCKER_CREDS = credentials('docker-credentials-id')
        PROJECT_NAME = "fileprocessing"
        GIT_COMMIT_SHORT = sh(script: "git rev-parse --short HEAD", returnStdout: true).trim()
        TAG = "${env.BUILD_NUMBER}-${GIT_COMMIT_SHORT}"
    }

    stages {
        stage('Build Docker Images') {
            steps {
                container('docker') {
                    script {    
                        withCredentials([usernamePassword(credentialsId: 'docker-credentials-id', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            sh "docker login -u ${USERNAME} -p ${PASSWORD} ${DOCKER_HUB}"
                        }
                        
                        sh "docker build --network=host -t ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:${TAG} ./api_service"
                        sh "docker build --network=host -t ${DOCKER_REGISTRY}/${PROJECT_NAME}-processor:${TAG} ./processor_service"
                        sh "docker build --network=host -t ${DOCKER_REGISTRY}/${PROJECT_NAME}-notifier:${TAG} ./notification_service"
                    }
                }
            }
        }
        
        stage('Push Docker Images') {
            steps {
                container('docker') {
                    script {
                        withCredentials([usernamePassword(credentialsId: 'docker-credentials-id', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                            sh "echo ${PASSWORD} | docker login ${DOCKER_HUB} -u ${USERNAME} --password-stdin"
                        }
                        
                        sh "docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:${TAG}"
                        sh "docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-processor:${TAG}"
                        sh "docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-notifier:${TAG}"

                        if (env.BRANCH_NAME == 'main') {
                            // Tag the images with 'latest' if on main branch
                            sh "docker tag ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:${TAG} ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:latest"
                            sh "docker tag ${DOCKER_REGISTRY}/${PROJECT_NAME}-processor:${TAG} ${DOCKER_REGISTRY}/${PROJECT_NAME}-processor:latest"
                            sh "docker tag ${DOCKER_REGISTRY}/${PROJECT_NAME}-notifier:${TAG} ${DOCKER_REGISTRY}/${PROJECT_NAME}-notifier:latest"
                            
                            sh "docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-api:latest"
                            sh "docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-processor:latest"
                            sh "docker push ${DOCKER_REGISTRY}/${PROJECT_NAME}-notifier:latest"
                        }
                    }
                }
            }
        }
        
        stage('Update Image Tags in Infrastructure Repo') {
            steps {
                container('docker') {
                    script {
                        // Install necessary tools
                        sh '''
                            apk add --no-cache git curl
                            curl -LO "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64"
                            chmod +x yq_linux_amd64
                            mv yq_linux_amd64 /usr/local/bin/yq
                        '''
                        
                        // Clone the Infrastructure repository
                        withCredentials([sshUserPrivateKey(credentialsId: 'infra-repo-key', keyFileVariable: 'SSH_KEY')]) {
                            sh '''
                                mkdir -p ~/.ssh
                                ssh-keyscan github.com >> ~/.ssh/known_hosts
                                GIT_SSH_COMMAND="ssh -i $SSH_KEY" git clone git@github.com:your-org/fileprocessing-infra.git
                                cd fileprocessing-infra
                                
                                # Update image references with yq
                                yq -i '.spec.template.spec.containers[0].image = "'${DOCKER_REGISTRY}/${PROJECT_NAME}-api:${TAG}'"' base/api.yaml
                                yq -i '.spec.template.spec.containers[0].image = "'${DOCKER_REGISTRY}/${PROJECT_NAME}-processor:${TAG}'"' base/processor.yaml
                                yq -i '.spec.template.spec.containers[0].image = "'${DOCKER_REGISTRY}/${PROJECT_NAME}-notifier:${TAG}'"' base/notifier.yaml
                                
                                # Commit and push changes
                                git config user.email "jenkins@example.com"
                                git config user.name "Jenkins CI"
                                git add base/*.yaml
                                git commit -m "Update image tags to ${TAG} [skip ci]"
                                GIT_SSH_COMMAND="ssh -i $SSH_KEY" git push origin main
                            '''
                        }
                    }
                }
            }
        }
    }
    
    post {
        always {
            // Clean workspace
            cleanWs()
        }
        
        success {
            echo "Build and push completed successfully!"
        }
        
        failure {
            echo "Build and push failed!"
        }
    }
}